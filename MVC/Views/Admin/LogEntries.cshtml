@model MVC.Models.AdminViewModels.LogEntriesViewModel

@{
  ViewData["Title"] = "Event Log";
}
@section styles {
  <link rel="stylesheet" type="text/css" media="all" href="~/css/bootstrap-daterangepicker/daterangepicker.css" />
}
<div class="container-sub">
  <h2 class="" style="">
    @ViewData["Title"]
  </h2>
  <hr />
  <form id="typesform" asp-action="LogEntries" method="get" class="gutter-10" style="padding-bottom:50px;">
    <input type="hidden" name="Page" value="@Model.PageIndex" />
    <input type="hidden" name="Start" value="@Model.StartDate" />
    <input type="hidden" name="End" value="@Model.EndDate" />
    <div class="form-group">
      <div class="col-md-2">
        @if (Context.User.IsInRole("AdminRole") || Context.User.IsInRole("ManagerRole"))
      {
          <a asp-action="ControlPanel" class="btn btn-primary">Admin</a>
        }
        <a asp-action="LogEntries" class="btn btn-primary" style="min-width: 0;">Reset</a>
      </div>
    </div>
    <div class="form-group">
      <label class="col-md-2 control-label" style="margin: 8px 0 0 0;">Count = @Model.EntryCount</label>
    </div>
    <div class="form-group">
      <label class="col-md-1 text-right control-label" style="margin: 8px 0 0 0; padding-right:5px;" for="LogDates">Log Dates</label>
      <div class="col-md-4">
        <input type="text" class="form-control" id="LogDates">
      </div>
    </div>
    <div class="form-group">
      <label class="col-md-1 text-right control-label" style="margin: 8px 0 0 0; padding-right:5px;">Types</label>
      <div class="col-md-2">
        @Html.DropDownListFor(model => model.Type, Model.Types, new { @class = "form-control", onchange = @"$('[name=Page]').val(1); this.form.submit();" })
      </div>
    </div>
  </form>
</div>
<table class="table table-striped table-hover">
  <thead>
    <tr>
      <th class="hidden-xs hidden-sm">
        Row
      </th>
      <th></th>
      <th>
        Date
      </th>
      <th class="hidden-xsuper">
        Subject
      </th>
      <th>
        Message
      </th>
      <th>
        UserName
      </th>
    </tr>
  </thead>
  <tbody>

    @if (Model.Entries.Count > 0)
    {
      var i = Model.RowIndex;
      foreach (var item in Model.Entries)
      {
        <tr>
          <td class="hidden-xs hidden-sm">
            @i
          </td>
          <td>
            <a class="btn btn-link" style="padding: 0; line-height: 1;" onclick="getLogEntry('@item.ID');">More</a>
          </td>
          <td>
            @item.CreateDate.AddMinutes(Model.TZoffset).ToString("yyyy-MM-dd HH:mm")
          </td>
          <td class="hidden-xsuper">
            @Html.DisplayFor(modelItem => item.Subject)
          </td>
          @if (item.Message.Length > 50)
          {
            <td title="@item.Message">
              @item.Message.Substring(0, 45)  ...
            </td>
          }
          else
          {
            <td>
              @Html.DisplayFor(modelItem => item.Message)
            </td>
          }
          <td>
            @Html.DisplayFor(modelItem => item.UserName)
          </td>
        </tr>
        i = i + 1;
      }
    }
    else
    {
      <tr>
        <td colspan="9">
          No Log Entries found.
        </td>
      </tr>
    }
  </tbody>
</table>

<div class="">
  @{
    var count = Model.TotalPages;
    if (count > 0)
    {
      var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
      var nextDisabled = !Model.HasNextPage ? "disabled" : "";
      <ul class="pagination pagination-sm">
        <li class="@prevDisabled"><a href="LogEntries?Page=@(Model.PageIndex - 1)&Start=@Model.StartDate&End=@Model.EndDate&Type=@Model.Type&Country=@Model.Country"><</a></li>
        @for (var p = 1; p <= count; p++)
        {
          if (p == Model.PageIndex)
          {
            <li class="active"><a href="LogEntries?Page=@p&Start=@Model.StartDate&End=@Model.EndDate&Type=@Model.Type&Country=@Model.Country">@p.ToString()</a></li>
          }
          else
          {
            <li><a href="LogEntries?Page=@p&Start=@Model.StartDate&End=@Model.EndDate&Type=@Model.Type&Country=@Model.Country">@p.ToString()</a></li>
          }
        }
        <li class="@nextDisabled"><a href="LogEntries?Page=@(Model.PageIndex + 1)&Start=@Model.StartDate&End=@Model.EndDate&Type=@Model.Type&Country=@Model.Country">></a></li>
      </ul>
    }
  }

</div>

<div id="LogEntryModal" class="modal modal-wide fade" role="dialog">
  <div class="modal-dialog">
    <!-- Modal content-->
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title">Log Entry</h4>
      </div>
      <div class="modal-body">
        <div id="LogEntryDiv" style="word-break:break-word;">
        </div>
      </div>
      <div class="modal-footer" style="text-align:center;">
        <button type="button" class="btn btn-primary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

@section scripts {
  <script src="https://cdn.jsdelivr.net/bootstrap.daterangepicker/2.1.25/daterangepicker.js" type="text/javascript"
          asp-fallback-src="~/js/bootstrap-daterangepicker/daterangepicker.js"
          asp-fallback-test="window.DateRangePicker">
  </script>
  <script type="text/javascript">

        function getLogEntry(id) {
            $.ajax({
                url: '/Admin/LogEntry/' + id,
                type: 'GET',
                cache: false,
                data: JSON.stringify({ 'id': id }),
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            })
              .done(function (data) {
              showLogEntryModal(response);
              })
              .fail(function (jqxhr, textStatus, error) {
                var err = textStatus + ", " + error;
                alert("Request Failed: " + err);
              })
              .always(function () {
                //alert('do something else');
              });
        }

        function showLogEntryModal(response) {
            var responseJSON = '<dl class="dl-horizontal">';
            $.each(response, function (key, value) {
                if (key == 'createDate') {
                    var cdm = moment(value).add(@Model.TZoffset, 'm');
                    responseJSON += '<dt>' + key + "</dt><dd> " + cdm.format("YYYY-MM-DD|hh:mm A") + '</dd>';
                } else {
                    responseJSON += '<dt>' + key + "</dt><dd> " + value + '</dd>';
                }
            });
            responseJSON += '</dl>';
            $('#LogEntryDiv').html(responseJSON);
            $('#LogEntryModal').modal('show');
        }

        function setNewGroup() {
            $('[name=Page]').val(1);
            if ($('#Type').val() != 0) {
                $('#Type').val('0');
                $('#typesform').submit();
            } else {
                $('#typesform').submit();
            }
        }
        function setNewDate(start, end, label) {
          $('#TypeGroup').val('0');
          $('#Type').val('0');
          $('[name=Page]').val(1);
          $('[name=Start]').val(moment(start).format('YYYY-MM-DD HH:mm Z'));
          $('[name=End]').val(moment(end).format('YYYY-MM-DD HH:mm Z'));
          $('#typesform').submit();
        }

        $(document).ready(function () {
            var startdate = '@Model.StartDate';
            var enddate = '@Model.EndDate';
            var start = moment.utc(startdate, 'YYYY-MM-DD HH:mm Z').local();
            var end = moment.utc(enddate, 'YYYY-MM-DD HH:mm Z').local();
            var options = {};
            options.dateLimit = { 'days' : 30 };
            options.showCustomRangeLabel = true;
            options.locale = { 'format': 'YYYY-MM-DD HH:mm' };
            options.timePicker = true;
            options.timePicker24Hour = true,
            options.timePickerIncrement = 15,
            options.applyClass = 'btn-primary',
            options.cancelClass = 'btn-primary',
            options.startDate = start;
            options.endDate = end;
            options.maxDate = end;
            $('#LogDates').daterangepicker(options, function (start, end, label) { setNewDate(start, end, label); });
        });

  </script>
}
